require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe MessagesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Message. As you add validations to Message, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {content: 'Text'}
  }

  let(:invalid_attributes) {
    {content: ('Text too long reaching the limit of 160 characters. ' * 10)}
  }

  before do
    @user = FactoryGirl.create(:user)
    login_with(@user)
  end

  describe "GET #index" do
    it "assigns all messages as @messages" do
      message = FactoryGirl.create(:message)
      get :index, {}
      expect(assigns(:messages)).to eq([message])
    end
  end

  describe "GET #show" do
    it "assigns the requested message as @message" do
      message = FactoryGirl.create(:message)
      get :show, {:id => message.to_param}
      expect(assigns(:message)).to eq(message)
    end
  end

  describe "GET #new" do
    it "assigns a new message as @message" do
      get :new, {}
      expect(assigns(:message)).to be_a_new(Message)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Message" do
        expect {
          post :create, {:message => valid_attributes}
        }.to change(Message, :count).by(1)
      end

      it "assigns a newly created message as @message" do
        post :create, {:message => valid_attributes}
        expect(assigns(:message)).to be_a(Message)
        expect(assigns(:message)).to be_persisted
      end

      it "redirects to the created message" do
        post :create, {:message => valid_attributes}
        expect(response).to redirect_to(Message.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved message as @message" do
        post :create, {:message => invalid_attributes}
        expect(assigns(:message)).to be_a_new(Message)
      end

      it "re-renders the 'new' template" do
        post :create, {:message => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested message" do
      message = FactoryGirl.create(:message, user: @user)
      expect {
        delete :destroy, {:id => message.to_param}
      }.to change(Message, :count).by(-1)
    end

    it "redirects to the messages list" do
      message = FactoryGirl.create(:message, user: @user)
      delete :destroy, {:id => message.to_param}
      expect(response).to redirect_to(messages_url)
    end
  end

end
